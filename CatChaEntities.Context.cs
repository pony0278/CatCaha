//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CatCaha
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class 貓抓抓Entities : DbContext
    {
        public 貓抓抓Entities()
            : base("name=貓抓抓Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Game_1on1訊息資料表> Game_1on1訊息資料表 { get; set; }
        public virtual DbSet<Game_shop_文章類型資料庫> Game_shop_文章類型資料庫 { get; set; }
        public virtual DbSet<Game_Shop公告> Game_Shop公告 { get; set; }
        public virtual DbSet<Game_Shop部落格資料表> Game_Shop部落格資料表 { get; set; }
        public virtual DbSet<Game_任務條件資料表> Game_任務條件資料表 { get; set; }
        public virtual DbSet<Game_任務總表> Game_任務總表 { get; set; }
        public virtual DbSet<Game_全頻道聊天資料表> Game_全頻道聊天資料表 { get; set; }
        public virtual DbSet<Game_好友列表聊天室資料表> Game_好友列表聊天室資料表 { get; set; }
        public virtual DbSet<Game_好友資料表> Game_好友資料表 { get; set; }
        public virtual DbSet<Game_成就獎勵總表> Game_成就獎勵總表 { get; set; }
        public virtual DbSet<Game_成就總表> Game_成就總表 { get; set; }
        public virtual DbSet<Game_扭蛋紀錄表> Game_扭蛋紀錄表 { get; set; }
        public virtual DbSet<Game_角色成就> Game_角色成就 { get; set; }
        public virtual DbSet<Game_物品購買紀錄表> Game_物品購買紀錄表 { get; set; }
        public virtual DbSet<Game_商品總表> Game_商品總表 { get; set; }
        public virtual DbSet<Game_商品類別表> Game_商品類別表 { get; set; }
        public virtual DbSet<Game_等級排位資料表> Game_等級排位資料表 { get; set; }
        public virtual DbSet<Game_會員B訊息資料表> Game_會員B訊息資料表 { get; set; }
        public virtual DbSet<Game_會員任務> Game_會員任務 { get; set; }
        public virtual DbSet<Game_貓幣兌換紀錄> Game_貓幣兌換紀錄 { get; set; }
        public virtual DbSet<Game_寵物> Game_寵物 { get; set; }
        public virtual DbSet<Game_寵物總表> Game_寵物總表 { get; set; }
        public virtual DbSet<Shop_Game_後臺管理員資料> Shop_Game_後臺管理員資料 { get; set; }
        public virtual DbSet<Shop_付款方式資料表> Shop_付款方式資料表 { get; set; }
        public virtual DbSet<Shop_申訴類別資料表> Shop_申訴類別資料表 { get; set; }
        public virtual DbSet<Shop_回覆資料表> Shop_回覆資料表 { get; set; }
        public virtual DbSet<Shop_我的最愛資料表> Shop_我的最愛資料表 { get; set; }
        public virtual DbSet<Shop_客訴狀態資料表> Shop_客訴狀態資料表 { get; set; }
        public virtual DbSet<Shop_訂單明細表> Shop_訂單明細表 { get; set; }
        public virtual DbSet<Shop_訂單狀態資料表> Shop_訂單狀態資料表 { get; set; }
        public virtual DbSet<Shop_訂單總表> Shop_訂單總表 { get; set; }
        public virtual DbSet<Shop_案件資料表> Shop_案件資料表 { get; set; }
        public virtual DbSet<Shop_退換貨原因資料表> Shop_退換貨原因資料表 { get; set; }
        public virtual DbSet<Shop_退換貨處理狀態資料表> Shop_退換貨處理狀態資料表 { get; set; }
        public virtual DbSet<Shop_商品評論表> Shop_商品評論表 { get; set; }
        public virtual DbSet<Shop_商品圖片表> Shop_商品圖片表 { get; set; }
        public virtual DbSet<Shop_商品總表> Shop_商品總表 { get; set; }
        public virtual DbSet<Shop_商品類別表> Shop_商品類別表 { get; set; }
        public virtual DbSet<Shop_常用地址資料表> Shop_常用地址資料表 { get; set; }
        public virtual DbSet<Shop_產品供應商> Shop_產品供應商 { get; set; }
        public virtual DbSet<Shop_會員折價券資料表> Shop_會員折價券資料表 { get; set; }
        public virtual DbSet<Shop_會員客訴案件表> Shop_會員客訴案件表 { get; set; }
        public virtual DbSet<Shop_會員資訊> Shop_會員資訊 { get; set; }
        public virtual DbSet<Shop_優惠券使用狀態表> Shop_優惠券使用狀態表 { get; set; }
        public virtual DbSet<Shop_優惠券總表> Shop_優惠券總表 { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<公告類型資料表> 公告類型資料表 { get; set; }
        public virtual DbSet<訊息類型資料表> 訊息類型資料表 { get; set; }
        public virtual DbSet<Game_角色資訊> Game_角色資訊 { get; set; }
        public virtual DbSet<Game_背包物品總表> Game_背包物品總表 { get; set; }
        public virtual DbSet<Shop_退換貨資料表> Shop_退換貨資料表 { get; set; }
        public virtual DbSet<Shop_會員優惠券資料表> Shop_會員優惠券資料表 { get; set; }
        public virtual DbSet<Shop_購物車> Shop_購物車 { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
